{"ast":null,"code":"var _jsxFileName = \"/Users/oyejin/join_practice/join/src/App.js\";\nimport React, { Component } from 'react'; //클래스 형 컴포넌트\n//class 클래스명 extends 상속자명\n//render 반드시 필요\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppView = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AppView;\n\nclass App extends Component {\n  //변수 -> 이렇게 단순하게 증가시키면 안됨.\n  //contructor 내의 addNum함수호출\n  constructor(props) {\n    super(props); // 관리하는 state를 알려줌 (state에서 관리하는 num!)\n    // 화면을 변경시키기 위해 state로 선언해야한다.\n\n    this.num = 0;\n\n    this.addNum = () => {\n      setInterval(() => {\n        //State에서 관리하는 num 가져오기\n        const {\n          num\n        } = this.state; // this.num = this.num + 1;\n        // console.log(this.num);\n\n        this.setState({\n          num: num + 1\n        });\n      }, 1000);\n      console.log(this.num);\n    };\n\n    this.state = {\n      num: 0\n    };\n    this.addNum();\n  } // addNum ?\n  // setInterval함수를 사용하여 현재 num을 1씩 증가시킴\n\n\n  render() {\n    const {\n      num\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Appview, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppView\");","map":{"version":3,"sources":["/Users/oyejin/join_practice/join/src/App.js"],"names":["React","Component","AppView","App","constructor","props","num","addNum","setInterval","state","setState","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;AACA;AACA;;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAClB,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAND;;KAAMA,O;;AAON,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAExB;AAGA;AACAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;;AAJe,SAHnBC,GAGmB,GAHb,CAGa;;AAAA,SAanBC,MAbmB,GAaV,MAAM;AACXC,MAAAA,WAAW,CAAC,MAAI;AAEZ;AACA,cAAM;AAACF,UAAAA;AAAD,YAAQ,KAAKG,KAAnB,CAHY,CAIZ;AACA;;AAEA,aAAKC,QAAL,CAAc;AAACJ,UAAAA,GAAG,EAAEA,GAAG,GAAC;AAAV,SAAd;AACH,OARU,EASX,IATW,CAAX;AAWAK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,GAAjB;AACH,KA1BkB;;AAKf,SAAKG,KAAL,GAAa;AACTH,MAAAA,GAAG,EAAE;AADI,KAAb;AAGA,SAAKC,MAAL;AACH,GAfuB,CAiBxB;AACA;;;AAiBAM,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEP,MAAAA;AAAF,QAAU,KAAKG,KAArB;AAEA,wBACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AA1CuB;;AA6C5B,eAAeN,GAAf","sourcesContent":["import React, { Component } from 'react'\n\n//클래스 형 컴포넌트\n//class 클래스명 extends 상속자명\n//render 반드시 필요\n\nconst AppView = () => {\n    return (\n        <div>\n            test\n        </div>\n    )\n}\nclass App extends Component {\n\n    //변수 -> 이렇게 단순하게 증가시키면 안됨.\n    num = 0;\n\n    //contructor 내의 addNum함수호출\n    constructor(props) {\n        super(props)\n\n        // 관리하는 state를 알려줌 (state에서 관리하는 num!)\n        // 화면을 변경시키기 위해 state로 선언해야한다.\n        this.state = {\n            num: 0\n        }\n        this.addNum();\n    }\n\n    // addNum ?\n    // setInterval함수를 사용하여 현재 num을 1씩 증가시킴\n    addNum = () => {\n        setInterval(()=>{\n\n            //State에서 관리하는 num 가져오기\n            const {num} = this.state;\n            // this.num = this.num + 1;\n            // console.log(this.num);\n\n            this.setState({num: num+1});\n        },\n        1000);\n\n        console.log(this.num);\n    }\n\n\n    render() {\n\n        const { num } = this.state;\n\n        return (\n            <Appview />\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}